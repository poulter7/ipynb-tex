\NeedsTeXFormat{LaTeX2e}[1994/12/01]
\ProvidesPackage{ipynb-tex}[2017/08/21 v0.1 ipynb in LaTeX]

\RequirePackage{filecontents}
\RequirePackage{graphicx}
\RequirePackage{minted}
\RequirePackage{xparse}
\RequirePackage{luacode}
\RequirePackage{luaimageembed}
\begin{luacode*}
--
-- json.lua
--
-- Copyright (c) 2020 rxi
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy of
-- this software and associated documentation files (the "Software"), to deal in
-- the Software without restriction, including without limitation the rights to
-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
-- of the Software, and to permit persons to whom the Software is furnished to do
-- so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.
--

json = { _version = "0.1.2" }

-------------------------------------------------------------------------------
-- Encode
-------------------------------------------------------------------------------

local encode

local escape_char_map = {
  [ "\\" ] = "\\",
  [ "\"" ] = "\"",
  [ "\b" ] = "b",
  [ "\f" ] = "f",
  [ "\n" ] = "n",
  [ "\r" ] = "r",
  [ "\t" ] = "t",
}

local escape_char_map_inv = { [ "/" ] = "/" }
for k, v in pairs(escape_char_map) do
  escape_char_map_inv[v] = k
end


local function escape_char(c)
  return "\\" .. (escape_char_map[c] or string.format("u%04x", c:byte()))
end


local function encode_nil(val)
  return "null"
end


local function encode_table(val, stack)
  local res = {}
  stack = stack or {}

  -- Circular reference?
  if stack[val] then error("circular reference") end

  stack[val] = true

  if rawget(val, 1) ~= nil or next(val) == nil then
    -- Treat as array -- check keys are valid and it is not sparse
    local n = 0
    for k in pairs(val) do
      if type(k) ~= "number" then
        error("invalid table: mixed or invalid key types")
      end
      n = n + 1
    end
    if n ~= #val then
      error("invalid table: sparse array")
    end
    -- Encode
    for i, v in ipairs(val) do
      table.insert(res, encode(v, stack))
    end
    stack[val] = nil
    return "[" .. table.concat(res, ",") .. "]"

  else
    -- Treat as an object
    for k, v in pairs(val) do
      if type(k) ~= "string" then
        error("invalid table: mixed or invalid key types")
      end
      table.insert(res, encode(k, stack) .. ":" .. encode(v, stack))
    end
    stack[val] = nil
    return "{" .. table.concat(res, ",") .. "}"
  end
end


local function encode_string(val)
  return '"' .. val:gsub('[%z\1-\31\\"]', escape_char) .. '"'
end


local function encode_number(val)
  -- Check for NaN, -inf and inf
  if val ~= val or val <= -math.huge or val >= math.huge then
    error("unexpected number value '" .. tostring(val) .. "'")
  end
  return string.format("%.14g", val)
end


local type_func_map = {
  [ "nil"     ] = encode_nil,
  [ "table"   ] = encode_table,
  [ "string"  ] = encode_string,
  [ "number"  ] = encode_number,
  [ "boolean" ] = tostring,
}


encode = function(val, stack)
  local t = type(val)
  local f = type_func_map[t]
  if f then
    return f(val, stack)
  end
  error("unexpected type '" .. t .. "'")
end


function json.encode(val)
  return ( encode(val) )
end


-------------------------------------------------------------------------------
-- Decode
-------------------------------------------------------------------------------

local parse

local function create_set(...)
  local res = {}
  for i = 1, select("#", ...) do
    res[ select(i, ...) ] = true
  end
  return res
end

local space_chars   = create_set(" ", "\t", "\r", "\n")
local delim_chars   = create_set(" ", "\t", "\r", "\n", "]", "}", ",")
local escape_chars  = create_set("\\", "/", '"', "b", "f", "n", "r", "t", "u")
local literals      = create_set("true", "false", "null")

local literal_map = {
  [ "true"  ] = true,
  [ "false" ] = false,
  [ "null"  ] = nil,
}


local function next_char(str, idx, set, negate)
  for i = idx, #str do
    if set[str:sub(i, i)] ~= negate then
      return i
    end
  end
  return #str + 1
end


local function decode_error(str, idx, msg)
  local line_count = 1
  local col_count = 1
  for i = 1, idx - 1 do
    col_count = col_count + 1
    if str:sub(i, i) == "\n" then
      line_count = line_count + 1
      col_count = 1
    end
  end
  error( string.format("%s at line %d col %d", msg, line_count, col_count) )
end


local function codepoint_to_utf8(n)
  -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
                       f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end


local function parse_unicode_escape(s)
  local n1 = tonumber( s:sub(1, 4),  16 )
  local n2 = tonumber( s:sub(7, 10), 16 )
   -- Surrogate pair?
  if n2 then
    return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
  else
    return codepoint_to_utf8(n1)
  end
end


local function parse_string(str, i)
  local res = ""
  local j = i + 1
  local k = j

  while j <= #str do
    local x = str:byte(j)

    if x < 32 then
      decode_error(str, j, "control character in string")

    elseif x == 92 then -- `\`: Escape
      res = res .. str:sub(k, j - 1)
      j = j + 1
      local c = str:sub(j, j)
      if c == "u" then
        local hex = str:match("^[dD][89aAbB]%x%x\\u%x%x%x%x", j + 1)
                 or str:match("^%x%x%x%x", j + 1)
                 or decode_error(str, j - 1, "invalid unicode escape in string")
        res = res .. parse_unicode_escape(hex)
        j = j + #hex
      else
        if not escape_chars[c] then
          decode_error(str, j - 1, "invalid escape char '" .. c .. "' in string")
        end
        res = res .. escape_char_map_inv[c]
      end
      k = j + 1

    elseif x == 34 then -- `"`: End of string
      res = res .. str:sub(k, j - 1)
      return res, j + 1
    end

    j = j + 1
  end

  decode_error(str, i, "expected closing quote for string")
end


local function parse_number(str, i)
  local x = next_char(str, i, delim_chars)
  local s = str:sub(i, x - 1)
  local n = tonumber(s)
  if not n then
    decode_error(str, i, "invalid number '" .. s .. "'")
  end
  return n, x
end


local function parse_literal(str, i)
  local x = next_char(str, i, delim_chars)
  local word = str:sub(i, x - 1)
  if not literals[word] then
    decode_error(str, i, "invalid literal '" .. word .. "'")
  end
  return literal_map[word], x
end


local function parse_array(str, i)
  local res = {}
  local n = 1
  i = i + 1
  while 1 do
    local x
    i = next_char(str, i, space_chars, true)
    -- Empty / end of array?
    if str:sub(i, i) == "]" then
      i = i + 1
      break
    end
    -- Read token
    x, i = parse(str, i)
    res[n] = x
    n = n + 1
    -- Next token
    i = next_char(str, i, space_chars, true)
    local chr = str:sub(i, i)
    i = i + 1
    if chr == "]" then break end
    if chr ~= "," then decode_error(str, i, "expected ']' or ','") end
  end
  return res, i
end


local function parse_object(str, i)
  local res = {}
  i = i + 1
  while 1 do
    local key, val
    i = next_char(str, i, space_chars, true)
    -- Empty / end of object?
    if str:sub(i, i) == "}" then
      i = i + 1
      break
    end
    -- Read key
    if str:sub(i, i) ~= '"' then
      decode_error(str, i, "expected string for key")
    end
    key, i = parse(str, i)
    -- Read ':' delimiter
    i = next_char(str, i, space_chars, true)
    if str:sub(i, i) ~= ":" then
      decode_error(str, i, "expected ':' after key")
    end
    i = next_char(str, i + 1, space_chars, true)
    -- Read value
    val, i = parse(str, i)
    -- Set
    res[key] = val
    -- Next token
    i = next_char(str, i, space_chars, true)
    local chr = str:sub(i, i)
    i = i + 1
    if chr == "}" then break end
    if chr ~= "," then decode_error(str, i, "expected '}' or ','") end
  end
  return res, i
end


local char_func_map = {
  [ '"' ] = parse_string,
  [ "0" ] = parse_number,
  [ "1" ] = parse_number,
  [ "2" ] = parse_number,
  [ "3" ] = parse_number,
  [ "4" ] = parse_number,
  [ "5" ] = parse_number,
  [ "6" ] = parse_number,
  [ "7" ] = parse_number,
  [ "8" ] = parse_number,
  [ "9" ] = parse_number,
  [ "-" ] = parse_number,
  [ "t" ] = parse_literal,
  [ "f" ] = parse_literal,
  [ "n" ] = parse_literal,
  [ "[" ] = parse_array,
  [ "{" ] = parse_object,
}


parse = function(str, idx)
  local chr = str:sub(idx, idx)
  local f = char_func_map[chr]
  if f then
    return f(str, idx)
  end
  decode_error(str, idx, "unexpected character '" .. chr .. "'")
end


function json.decode(str)
  if type(str) ~= "string" then
    error("expected argument of type string, got " .. type(str))
  end
  local res, idx = parse(str, next_char(str, 1, space_chars, true))
  idx = next_char(str, idx, space_chars, true)
  if idx <= #str then
    decode_error(str, idx, "trailing garbage")
  end
  return res
end

\end{luacode*}

\begin{luacode*}
ipynb = {}
ipynb.loaded = {} -- cache for loaded notebooks
ipynb.io = {}
ipynb.util = {}
ipynb.extract = {}

-- Load the file from disk and parse it as JSON
function ipynb.io.load_json(file)
    if ipynb.loaded[file] == nil then
      local handler = io.open(file, "rb")
      local content = handler:read("*all")
      handler:close()
      ipynb.loaded[file] = json.decode(content)
    end
    return ipynb.loaded[file]
end

-- Extract the first cell with a specific tag
function ipynb.util.tagged_cell(file, tag)
    local cells = ipynb.io.load_json(file).cells
    for i, cell in ipairs(cells) do
        if cell.metadata.tags ~= nil then
            for j, t in ipairs(cell.metadata.tags) do
                if t == tag then
                    return cell
                end
            end
        end
    end
end

function map(tbl, func)
    local new_tbl = {}
    for k, v in pairs(tbl) do
        new_tbl[k] = func(v)
    end
    return new_tbl
end

function ipynb.util.sanitize_b64_string(b64_string)
    return b64_string:gsub("\n", ""):gsub(" ", "")
end

function ipynb.util.sanitize_string(text)
  return text:gsub(" ", "\\ "):gsub("\n", "")
end


function ipynb.extract.source(cell)
    return map(cell.source, ipynb.util.sanitize_string)
end

function ipynb.extract.output_text(cell, index)
    return map(cell.outputs[index or 1].text, ipynb.util.sanitize_string)
end

function ipynb.io.print(output)
    tex.print("")
    for i, c in ipairs(output) do
      tex.print(c, " ")
    end
end



\end{luacode*}
\NewDocumentEnvironment{customminted}{m m}{\begin{minted}{#1} #2}{\end{minted}}
\ProvideDocumentCommand{\ipynbsource}{m m}{
  \directlua{
    ipynb.io.print(ipynb.extract.source(ipynb.util.tagged_cell("\luaescapestring{\unexpanded{#1}}", "\luaescapestring{\unexpanded{#2}}")))
  }
}
\providecommand{\ipynboutput}[2]{
  \directlua{
    ipynb.io.print(ipynb.extract.output_text(ipynb.util.tagged_cell("\luaescapestring{\unexpanded{#1}}", "\luaescapestring{\unexpanded{#2}}")))
  }
}
\providecommand{\ipynbimage}[2]{
  \includegraphicsembedded[width=4cm]{%
    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
  }
}
\providecommand{\ipynb}[2]{
    % \ipynbsource{#1}{#2}
    % \ipynboutput{#1}{#2}
}
